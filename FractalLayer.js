

//functions return number from 0 to (maxIter-1)

var obj = {
    'julia': function (cx, cy, maxIter, cr, ci, r) { // cx,cy not fixed, cr,ci -- fixed. In mandelbrot vice versa
        var iter, xn, x = cx, y = cy;
        // z_{k+1} = (z_k)^3 + c 
        // |z_k| ≤ R && k ≤ maxIter; x^3 + 3x^2 * y + 3y^2 * x + y^3
        for (iter = 0; Math.sqrt(x * x + y * y) < r && iter < maxIter; iter++) {
            // xn = Math.pow((x * x + y * y), (n / 2)) * Math.cos(n * Math.atan2(y, x)) + cr;
            // y =  Math.pow((x * x + y * y), (n / 2)) * Math.sin(n * Math.atan2(y, x)) + ci;
            xn = x * x * x - 3 * x * y * y + cr;
            y = 3 * x * x * y - y * y * y + ci;
            x = xn;
        }
        return iter;
    },
}
obj.initialize = function () {
    this.colors = new Uint32Array([4281282495, 4281283263, 4281283775, 4281284287, 4281285055, 4281285567, 4281286335, 4281286847, 4281287359, 4281288127, 4281288639, 4281289407, 4281289919, 4281290431, 4281291199, 4281291711, 4281292479, 4281292991, 4281293503, 4281294271, 4281294783, 4281295551, 4281296063, 4281296575, 4281297343, 4281297855, 4281298367, 4281299135, 4281299647, 4281300415, 4281300927, 4281301439, 4281302207, 4281302719, 4281303487, 4281303999, 4281304511, 4281305279, 4281305791, 4281306559, 4281307071, 4281307583, 4281308351, 4281308863, 4281309631, 4281310143, 4281310655, 4281311423, 4281311935, 4281312447, 4281313215, 4281313727, 4281314495, 4281315007, 4281315519, 4281316287, 4281316799, 4281317567, 4281318079, 4281318591, 4281319359, 4281319356, 4281319354, 4281319352, 4281319349, 4281319347, 4281319344, 4281319342, 4281319340, 4281319337, 4281319335, 4281319332, 4281319330, 4281319328, 4281319325, 4281319323, 4281319321, 4281319318, 4281319316, 4281319313, 4281319311, 4281319309, 4281319306, 4281319304, 4281319301, 4281319299, 4281319297, 4281319294, 4281319292, 4281319289, 4281319287, 4281319285, 4281319282, 4281319280, 4281319277, 4281319275, 4281319273, 4281319270, 4281319268, 4281319266, 4281319263, 4281319261, 4281319258, 4281319256, 4281319254, 4281319251, 4281319249, 4281319246, 4281319244, 4281319242, 4281319239, 4281319237, 4281319234, 4281319232, 4281319230, 4281319227, 4281319225, 4281319222, 4281319220, 4281319218, 4281319215, 4281515823, 4281646895, 4281777967, 4281974575, 4282105647, 4282302255, 4282433327, 4282564399, 4282761007, 4282892079, 4283088687, 4283219759, 4283350831, 4283547439, 4283678511, 4283875119, 4284006191, 4284137263, 4284333871, 4284464943, 4284661551, 4284792623, 4284923695, 4285120303, 4285251375, 4285382447, 4285579055, 4285710127, 4285906735, 4286037807, 4286168879, 4286365487, 4286496559, 4286693167, 4286824239, 4286955311, 4287151919, 4287282991, 4287479599, 4287610671, 4287741743, 4287938351, 4288069423, 4288266031, 4288397103, 4288528175, 4288724783, 4288855855, 4288986927, 4289183535, 4289314607, 4289511215, 4289642287, 4289773359, 4289969967, 4290101039, 4290297647, 4290428719, 4290559791, 4290756399, 4290755631, 4290755119, 4290754607, 4290753839, 4290753327, 4290752559, 4290752047, 4290751535, 4290750767, 4290750255, 4290749487, 4290748975, 4290748463, 4290747695, 4290747183, 4290746671, 4290745903, 4290745391, 4290744623, 4290744111, 4290743599, 4290742831, 4290742319, 4290741551, 4290741039, 4290740527, 4290739759, 4290739247, 4290738479, 4290737967, 4290737455, 4290736687, 4290736175, 4290735407, 4290734895, 4290734383, 4290733615, 4290733103, 4290732591, 4290731823, 4290731311, 4290730543, 4290730031, 4290729519, 4290728751, 4290728239, 4290727471, 4290726959, 4290726447, 4290725679, 4290725167, 4290724399, 4290723887, 4290723375, 4290722607, 4290722095, 4290721327, 4290720815, 4290720303, 4290719535, 4290719538, 4290719540, 4290719542, 4290719545, 4290719547, 4290719550, 4290719552, 4290719554, 4290719557, 4290719559, 4290719562, 4290719564, 4290719566, 4290719569, 4290719571, 4290719574, 4290719576, 4290719578, 4290719581, 4290719583, 4290719586, 4290719588, 4290719590, 4290719593, 4290719595, 4290719597, 4290719600, 4290719602, 4290719605, 4290719607, 4290719609, 4290719612, 4290719614, 4290719617, 4290719619, 4290719621, 4290719624, 4290719626, 4290719629, 4290719631, 4290719633, 4290719636, 4290719638, 4290719641, 4290719643, 4290719645, 4290719648, 4290719650, 4290719652, 4290719655, 4290719657, 4290719660, 4290719662, 4290719664, 4290719667, 4290719669, 4290719672, 4290719674, 4290719676, 4290719679, 4290523071, 4290391999, 4290260927, 4290064319, 4289933247, 4289736639, 4289605567, 4289474495, 4289277887, 4289146815, 4288950207, 4288819135, 4288688063, 4288491455, 4288360383, 4288229311, 4288032703, 4287901631, 4287705023, 4287573951, 4287442879, 4287246271, 4287115199, 4286918591, 4286787519, 4286656447, 4286459839, 4286328767, 4286132159, 4286001087, 4285870015, 4285673407, 4285542335, 4285345727, 4285214655, 4285083583, 4284886975, 4284755903, 4284624831, 4284428223, 4284297151, 4284100543, 4283969471, 4283838399, 4283641791, 4283510719, 4283314111, 4283183039, 4283051967, 4282855359, 4282724287, 4282527679, 4282396607, 4282265535, 4282068927, 4281937855, 4281741247, 4281610175, 4281479103, 4290719679]);
    this.negativePalette = new Uint32Array([-140000, -140768, -141280, -141792, -142560, -143072, -143840, -144352, -144864, -145632, -146144, -146912, -147424, -147936, -148704, -149216, -149984, -150496, -151008, -151776, -152288, -153056, -153568, -154080, -154848, -155360, -155872, -156640, -157152, -157920, -158432, -158944, -159712, -160224, -160992, -161504, -162016, -162784, -163296, -164064, -164576, -165088, -165856, -166368, -167136, -167648, -168160, -168928, -169440, -169952, -170720, -171232, -172000, -172512, -173024, -173792, -174304, -175072, -175584, -176096, -176864, -176861, -176859, -176857, -176854, -176852, -176849, -176847, -176845, -176842, -176840, -176837, -176835, -176833, -176830, -176828, -176826, -176823, -176821, -176818, -176816, -176814, -176811, -176809, -176806, -176804, -176802, -176799, -176797, -176794, -176792, -176790, -176787, -176785, -176782, -176780, -176778, -176775, -176773, -176771, -176768, -176766, -176763, -176761, -176759, -176756, -176754, -176751, -176749, -176747, -176744, -176742, -176739, -176737, -176735, -176732, -176730, -176727, -176725, -176723, -176720, -373328, -504400, -635472, -832080, -963152, -1159760, -1290832, -1421904, -1618512, -1749584, -1946192, -2077264, -2208336, -2404944, -2536016, -2732624, -2863696, -2994768, -3191376, -3322448, -3519056, -3650128, -3781200, -3977808, -4108880, -4239952, -4436560, -4567632, -4764240, -4895312, -5026384, -5222992, -5354064, -5550672, -5681744, -5812816, -6009424, -6140496, -6337104, -6468176, -6599248, -6795856, -6926928, -7123536, -7254608, -7385680, -7582288, -7713360, -7844432, -8041040, -8172112, -8368720, -8499792, -8630864, -8827472, -8958544, -9155152, -9286224, -9417296, -9613904, -9613136, -9612624, -9612112, -9611344, -9610832, -9610064, -9609552, -9609040, -9608272, -9607760, -9606992, -9606480, -9605968, -9605200, -9604688, -9604176, -9603408, -9602896, -9602128, -9601616, -9601104, -9600336, -9599824, -9599056, -9598544, -9598032, -9597264, -9596752, -9595984, -9595472, -9594960, -9594192, -9593680, -9592912, -9592400, -9591888, -9591120, -9590608, -9590096, -9589328, -9588816, -9588048, -9587536, -9587024, -9586256, -9585744, -9584976, -9584464, -9583952, -9583184, -9582672, -9581904, -9581392, -9580880, -9580112, -9579600, -9578832, -9578320, -9577808, -9577040, -9577043, -9577045, -9577047, -9577050, -9577052, -9577055, -9577057, -9577059, -9577062, -9577064, -9577067, -9577069, -9577071, -9577074, -9577076, -9577079, -9577081, -9577083, -9577086, -9577088, -9577091, -9577093, -9577095, -9577098, -9577100, -9577102, -9577105, -9577107, -9577110, -9577112, -9577114, -9577117, -9577119, -9577122, -9577124, -9577126, -9577129, -9577131, -9577134, -9577136, -9577138, -9577141, -9577143, -9577146, -9577148, -9577150, -9577153, -9577155, -9577157, -9577160, -9577162, -9577165, -9577167, -9577169, -9577172, -9577174, -9577177, -9577179, -9577181, -9577184, -9380576, -9249504, -9118432, -8921824, -8790752, -8594144, -8463072, -8332000, -8135392, -8004320, -7807712, -7676640, -7545568, -7348960, -7217888, -7086816, -6890208, -6759136, -6562528, -6431456, -6300384, -6103776, -5972704, -5776096, -5645024, -5513952, -5317344, -5186272, -4989664, -4858592, -4727520, -4530912, -4399840, -4203232, -4072160, -3941088, -3744480, -3613408, -3482336, -3285728, -3154656, -2958048, -2826976, -2695904, -2499296, -2368224, -2171616, -2040544, -1909472, -1712864, -1581792, -1385184, -1254112, -1123040, -926432, -795360, -598752, -467680, -336608, -9577184]);
    this.greenPinkPalette = new Uint32Array([-59982483, -59983251, -59983763, -59984275, -59985043, -59985555, -59986323, -59986835, -59987347, -59988115, -59988627, -59989395, -59989907, -59990419, -59991187, -59991699, -59992467, -59992979, -59993491, -59994259, -59994771, -59995539, -59996051, -59996563, -59997331, -59997843, -59998355, -59999123, -59999635, -60000403, -60000915, -60001427, -60002195, -60002707, -60003475, -60003987, -60004499, -60005267, -60005779, -60006547, -60007059, -60007571, -60008339, -60008851, -60009619, -60010131, -60010643, -60011411, -60011923, -60012435, -60013203, -60013715, -60014483, -60014995, -60015507, -60016275, -60016787, -60017555, -60018067, -60018579, -60019347, -60019344, -60019342, -60019340, -60019337, -60019335, -60019332, -60019330, -60019328, -60019325, -60019323, -60019320, -60019318, -60019316, -60019313, -60019311, -60019309, -60019306, -60019304, -60019301, -60019299, -60019297, -60019294, -60019292, -60019289, -60019287, -60019285, -60019282, -60019280, -60019277, -60019275, -60019273, -60019270, -60019268, -60019265, -60019263, -60019261, -60019258, -60019256, -60019254, -60019251, -60019249, -60019246, -60019244, -60019242, -60019239, -60019237, -60019234, -60019232, -60019230, -60019227, -60019225, -60019222, -60019220, -60019218, -60019215, -60019213, -60019210, -60019208, -60019206, -60019203, -60215811, -60346883, -60477955, -60674563, -60805635, -61002243, -61133315, -61264387, -61460995, -61592067, -61788675, -61919747, -62050819, -62247427, -62378499, -62575107, -62706179, -62837251, -63033859, -63164931, -63361539, -63492611, -63623683, -63820291, -63951363, -64082435, -64279043, -64410115, -64606723, -64737795, -64868867, -65065475, -65196547, -65393155, -65524227, -65655299, -65851907, -65982979, -66179587, -66310659, -66441731, -66638339, -66769411, -66966019, -67097091, -67228163, -67424771, -67555843, -67686915, -67883523, -68014595, -68211203, -68342275, -68473347, -68669955, -68801027, -68997635, -69128707, -69259779, -69456387, -69455619, -69455107, -69454595, -69453827, -69453315, -69452547, -69452035, -69451523, -69450755, -69450243, -69449475, -69448963, -69448451, -69447683, -69447171, -69446659, -69445891, -69445379, -69444611, -69444099, -69443587, -69442819, -69442307, -69441539, -69441027, -69440515, -69439747, -69439235, -69438467, -69437955, -69437443, -69436675, -69436163, -69435395, -69434883, -69434371, -69433603, -69433091, -69432579, -69431811, -69431299, -69430531, -69430019, -69429507, -69428739, -69428227, -69427459, -69426947, -69426435, -69425667, -69425155, -69424387, -69423875, -69423363, -69422595, -69422083, -69421315, -69420803, -69420291, -69419523, -69419526, -69419528, -69419530, -69419533, -69419535, -69419538, -69419540, -69419542, -69419545, -69419547, -69419550, -69419552, -69419554, -69419557, -69419559, -69419562, -69419564, -69419566, -69419569, -69419571, -69419574, -69419576, -69419578, -69419581, -69419583, -69419585, -69419588, -69419590, -69419593, -69419595, -69419597, -69419600, -69419602, -69419605, -69419607, -69419609, -69419612, -69419614, -69419617, -69419619, -69419621, -69419624, -69419626, -69419629, -69419631, -69419633, -69419636, -69419638, -69419640, -69419643, -69419645, -69419648, -69419650, -69419652, -69419655, -69419657, -69419660, -69419662, -69419664, -69419667, -69223059, -69091987, -68960915, -68764307, -68633235, -68436627, -68305555, -68174483, -67977875, -67846803, -67650195, -67519123, -67388051, -67191443, -67060371, -66929299, -66732691, -66601619, -66405011, -66273939, -66142867, -65946259, -65815187, -65618579, -65487507, -65356435, -65159827, -65028755, -64832147, -64701075, -64570003, -64373395, -64242323, -64045715, -63914643, -63783571, -63586963, -63455891, -63324819, -63128211, -62997139, -62800531, -62669459, -62538387, -62341779, -62210707, -62014099, -61883027, -61751955, -61555347, -61424275, -61227667, -61096595, -60965523, -60768915, -60637843, -60441235, -60310163, -60179091, -69419667]);
    this.sakuraPalette = new Uint32Array([167328751, 167132143, 167001071, 166869999, 166673391, 166542319, 166345711, 166214639, 166083567, 165886959, 165755887, 165559279, 165428207, 165297135, 165100527, 164969455, 164772847, 164641775, 164510703, 164314095, 164183023, 163986415, 163855343, 163724271, 163527663, 163396591, 163265519, 163068911, 162937839, 162741231, 162610159, 162479087, 162282479, 162151407, 161954799, 161823727, 161692655, 161496047, 161364975, 161168367, 161037295, 160906223, 160709615, 160578543, 160381935, 160250863, 160119791, 159923183, 159792111, 159661039, 159464431, 159333359, 159136751, 159005679, 158874607, 158677999, 158546927, 158350319, 158219247, 158088175, 157891567, 208223215, 241777647, 275332079, 325663727, 359218159, 409549807, 443104239, 476658671, 526990319, 560544751, 610876399, 644430831, 677985263, 728316911, 761871343, 795425775, 845757423, 879311855, 929643503, 963197935, 996752367, 1047084015, 1080638447, 1130970095, 1164524527, 1198078959, 1248410607, 1281965039, 1332296687, 1365851119, 1399405551, 1449737199, 1483291631, 1533623279, 1567177711, 1600732143, 1651063791, 1684618223, 1718172655, 1768504303, 1802058735, 1852390383, 1885944815, 1919499247, 1969830895, 2003385327, 2053716975, 2087271407, 2120825839, 2171157487, 2204711919, 2255043567, 2288597999, 2322152431, 2372484079, 2406038511, 2456370159, 2489924591, 2523479023, 2573810671, 2573809903, 2573809391, 2573808879, 2573808111, 2573807599, 2573806831, 2573806319, 2573805807, 2573805039, 2573804527, 2573803759, 2573803247, 2573802735, 2573801967, 2573801455, 2573800687, 2573800175, 2573799663, 2573798895, 2573798383, 2573797615, 2573797103, 2573796591, 2573795823, 2573860846, 2573860334, 2573859566, 2573859054, 2573858286, 2573857774, 2573857262, 2573856494, 2573855982, 2573855214, 2573854702, 2573854190, 2573853422, 2573852910, 2573852142, 2573851630, 2573851118, 2573850350, 2573849838, 2573849070, 2573848558, 2573848046, 2573847278, 2573846766, 2573846254, 2573845486, 2573844974, 2573844206, 2573843694, 2573843182, 2573842414, 2573841902, 2573841134, 2573840622, 2573840110, 2573839342, 2574035950, 2574167022, 2574298094, 2574494702, 2574625774, 2574822382, 2574953454, 2575084526, 2575281134, 2575412206, 2575608814, 2575739886, 2575870958, 2576067566, 2576198638, 2576329710, 2576526318, 2576657390, 2576853998, 2576985070, 2577116142, 2577312750, 2577443822, 2577640430, 2577771502, 2577902574, 2578099182, 2578230254, 2578426862, 2578557934, 2578689006, 2578885614, 2579016686, 2579213294, 2579344366, 2579475438, 2579672046, 2579803118, 2579934190, 2580130798, 2580261870, 2580458478, 2580589550, 2580720622, 2580917230, 2581048302, 2581244910, 2581375982, 2581507054, 2581703662, 2581834734, 2582031342, 2582162414, 2582293486, 2582490094, 2582621166, 2582817774, 2582948846, 2583079918, 2583276526, 2532944878, 2499390446, 2465836014, 2415504366, 2381949934, 2331618286, 2298063854, 2264509422, 2214177774, 2180623342, 2130291694, 2096737262, 2063182830, 2012851182, 1979296750, 1928965102, 1895410670, 1861856238, 1811524590, 1777970158, 1727638510, 1694084078, 1660529646, 1610197998, 1576643566, 1543089134, 1492757486, 1459203054, 1408871406, 1375316974, 1341762542, 1291430894, 1257876462, 1207544814, 1173990382, 1140435950, 1090104302, 1056549870, 1006218222, 972663790, 939109358, 888777710, 855223278, 804891630, 771337198, 737782766, 687451118, 653896686, 620342254, 570010606, 536456174, 486124526, 452570094, 419015662, 368684014, 335129582, 284797934, 251243502, 217689070, 167357422, 167358190, 167358702, 167359214, 167359982, 167360494, 167361262, 167361774, 167362286, 167363054, 167363566, 167364334, 167364846, 167365358, 167366126, 167366638, 167367150, 167367918, 167368430, 167369198, 167369710, 167370222, 167370990, 167371502, 167372270, 167372782, 167373294, 167374062, 167374574, 167375342, 167375854, 167376366, 167377134, 167377646, 167378414, 167378926, 167313903, 167314671, 167315183, 167315695, 167316463, 167316975, 167317743, 167318255, 167318767, 167319535, 167320047, 167320815, 167321327, 167321839, 167322607, 167323119, 167323887, 167324399, 167324911, 167325679, 167326191, 167326959, 167327471, 167327983, 167357422]);
    this.greenPurplePalette = new Uint32Array([-39982483, -39983251, -39983763, -39984275, -39985043, -39985555, -39986323, -39986835, -39987347, -39988115, -39988627, -39989395, -39989907, -39990419, -39991187, -39991699, -39992467, -39992979, -39993491, -39994259, -39994771, -39995539, -39996051, -39996563, -39997331, -39997843, -39998355, -39999123, -39999635, -40000403, -40000915, -40001427, -40002195, -40002707, -40003475, -40003987, -40004499, -40005267, -40005779, -40006547, -40007059, -40007571, -40008339, -40008851, -40009619, -40010131, -40010643, -40011411, -40011923, -40012435, -40013203, -40013715, -40014483, -40014995, -40015507, -40016275, -40016787, -40017555, -40018067, -40018579, -40019347, -40019344, -40019342, -40019340, -40019337, -40019335, -40019332, -40019330, -40019328, -40019325, -40019323, -40019320, -40019318, -40019316, -40019313, -40019311, -40019309, -40019306, -40019304, -40019301, -40019299, -40019297, -40019294, -40019292, -40019289, -40019287, -40019285, -40019282, -40019280, -40019277, -40019275, -40019273, -40019270, -40019268, -40019265, -40019263, -40019261, -40019258, -40019256, -40019254, -40019251, -40019249, -40019246, -40019244, -40019242, -40019239, -40019237, -40019234, -40019232, -40019230, -40019227, -40019225, -40019222, -40019220, -40019218, -40019215, -40019213, -40019210, -40019208, -40019206, -40019203, -40215811, -40346883, -40477955, -40674563, -40805635, -41002243, -41133315, -41264387, -41460995, -41592067, -41788675, -41919747, -42050819, -42247427, -42378499, -42575107, -42706179, -42837251, -43033859, -43164931, -43361539, -43492611, -43623683, -43820291, -43951363, -44082435, -44279043, -44410115, -44606723, -44737795, -44868867, -45065475, -45196547, -45393155, -45524227, -45655299, -45851907, -45982979, -46179587, -46310659, -46441731, -46638339, -46769411, -46966019, -47097091, -47228163, -47424771, -47555843, -47686915, -47883523, -48014595, -48211203, -48342275, -48473347, -48669955, -48801027, -48997635, -49128707, -49259779, -49456387, -49455619, -49455107, -49454595, -49453827, -49453315, -49452547, -49452035, -49451523, -49450755, -49450243, -49449475, -49448963, -49448451, -49447683, -49447171, -49446659, -49445891, -49445379, -49444611, -49444099, -49443587, -49442819, -49442307, -49441539, -49441027, -49440515, -49439747, -49439235, -49438467, -49437955, -49437443, -49436675, -49436163, -49435395, -49434883, -49434371, -49433603, -49433091, -49432579, -49431811, -49431299, -49430531, -49430019, -49429507, -49428739, -49428227, -49427459, -49426947, -49426435, -49425667, -49425155, -49424387, -49423875, -49423363, -49422595, -49422083, -49421315, -49420803, -49420291, -49419523, -49419526, -49419528, -49419530, -49419533, -49419535, -49419538, -49419540, -49419542, -49419545, -49419547, -49419550, -49419552, -49419554, -49419557, -49419559, -49419562, -49419564, -49419566, -49419569, -49419571, -49419574, -49419576, -49419578, -49419581, -49419583, -49419585, -49419588, -49419590, -49419593, -49419595, -49419597, -49419600, -49419602, -49419605, -49419607, -49419609, -49419612, -49419614, -49419617, -49419619, -49419621, -49419624, -49419626, -49419629, -49419631, -49419633, -49419636, -49419638, -49419640, -49419643, -49419645, -49419648, -49419650, -49419652, -49419655, -49419657, -49419660, -49419662, -49419664, -49419667, -49223059, -49091987, -48960915, -48764307, -48633235, -48436627, -48305555, -48174483, -47977875, -47846803, -47650195, -47519123, -47388051, -47191443, -47060371, -46929299, -46732691, -46601619, -46405011, -46273939, -46142867, -45946259, -45815187, -45618579, -45487507, -45356435, -45159827, -45028755, -44832147, -44701075, -44570003, -44373395, -44242323, -44045715, -43914643, -43783571, -43586963, -43455891, -43324819, -43128211, -42997139, -42800531, -42669459, -42538387, -42341779, -42210707, -42014099, -41883027, -41751955, -41555347, -41424275, -41227667, -41096595, -40965523, -40768915, -40637843, -40441235, -40310163, -40179091, -49419667]);
    this.yellowRedPalette = new Uint32Array([-78982455, -78983223, -78983735, -78984247, -78985015, -78985527, -78986295, -78986807, -78987319, -78988087, -78988599, -78989367, -78989879, -78990391, -78991159, -78991671, -78992439, -78992951, -78993463, -78994231, -78994743, -78995511, -78996023, -78996535, -78997303, -78997815, -78998327, -78999095, -78999607, -79000375, -79000887, -79001399, -79002167, -79002679, -79003447, -79003959, -79004471, -79005239, -79005751, -79006519, -79007031, -79007543, -79008311, -79008823, -79009591, -79010103, -79010615, -79011383, -79011895, -79012407, -79013175, -79013687, -79014455, -79014967, -79015479, -79016247, -79016759, -79017527, -79018039, -79018551, -79019319, -79019316, -79019314, -79019312, -79019309, -79019307, -79019304, -79019302, -79019300, -79019297, -79019295, -79019292, -79019290, -79019288, -79019285, -79019283, -79019281, -79019278, -79019276, -79019273, -79019271, -79019269, -79019266, -79019264, -79019261, -79019259, -79019257, -79019254, -79019252, -79019249, -79019247, -79019245, -79019242, -79019240, -79019237, -79019235, -79019233, -79019230, -79019228, -79019226, -79019223, -79019221, -79019218, -79019216, -79019214, -79019211, -79019209, -79019206, -79019204, -79019202, -79019199, -79019197, -79019194, -79019192, -79019190, -79019187, -79019185, -79019182, -79019180, -79019178, -79019175, -79215783, -79346855, -79477927, -79674535, -79805607, -80002215, -80133287, -80264359, -80460967, -80592039, -80788647, -80919719, -81050791, -81247399, -81378471, -81575079, -81706151, -81837223, -82033831, -82164903, -82361511, -82492583, -82623655, -82820263, -82951335, -83082407, -83279015, -83410087, -83606695, -83737767, -83868839, -84065447, -84196519, -84393127, -84524199, -84655271, -84851879, -84982951, -85179559, -85310631, -85441703, -85638311, -85769383, -85965991, -86097063, -86228135, -86424743, -86555815, -86686887, -86883495, -87014567, -87211175, -87342247, -87473319, -87669927, -87800999, -87997607, -88128679, -88259751, -88456359, -88455591, -88455079, -88454567, -88453799, -88453287, -88452519, -88452007, -88451495, -88450727, -88450215, -88449447, -88448935, -88448423, -88447655, -88447143, -88446631, -88445863, -88445351, -88444583, -88444071, -88443559, -88442791, -88442279, -88441511, -88440999, -88440487, -88439719, -88439207, -88438439, -88437927, -88437415, -88436647, -88436135, -88435367, -88434855, -88434343, -88433575, -88433063, -88432551, -88431783, -88431271, -88430503, -88429991, -88429479, -88428711, -88428199, -88427431, -88426919, -88426407, -88425639, -88425127, -88424359, -88423847, -88423335, -88422567, -88422055, -88421287, -88420775, -88420263, -88419495, -88419498, -88419500, -88419502, -88419505, -88419507, -88419510, -88419512, -88419514, -88419517, -88419519, -88419522, -88419524, -88419526, -88419529, -88419531, -88419534, -88419536, -88419538, -88419541, -88419543, -88419546, -88419548, -88419550, -88419553, -88419555, -88419557, -88419560, -88419562, -88419565, -88419567, -88419569, -88419572, -88419574, -88419577, -88419579, -88419581, -88419584, -88419586, -88419589, -88419591, -88419593, -88419596, -88419598, -88419601, -88419603, -88419605, -88419608, -88419610, -88419612, -88419615, -88419617, -88419620, -88419622, -88419624, -88419627, -88419629, -88419632, -88419634, -88419636, -88419639, -88223031, -88091959, -87960887, -87764279, -87633207, -87436599, -87305527, -87174455, -86977847, -86846775, -86650167, -86519095, -86388023, -86191415, -86060343, -85929271, -85732663, -85601591, -85404983, -85273911, -85142839, -84946231, -84815159, -84618551, -84487479, -84356407, -84159799, -84028727, -83832119, -83701047, -83569975, -83373367, -83242295, -83045687, -82914615, -82783543, -82586935, -82455863, -82324791, -82128183, -81997111, -81800503, -81669431, -81538359, -81341751, -81210679, -81014071, -80882999, -80751927, -80555319, -80424247, -80227639, -80096567, -79965495, -79768887, -79637815, -79441207, -79310135, -79179063, -88419639]);
    this.bluePurplePalette = new Uint32Array([-19982483, -19983251, -19983763, -19984275, -19985043, -19985555, -19986323, -19986835, -19987347, -19988115, -19988627, -19989395, -19989907, -19990419, -19991187, -19991699, -19992467, -19992979, -19993491, -19994259, -19994771, -19995539, -19996051, -19996563, -19997331, -19997843, -19998355, -19999123, -19999635, -20000403, -20000915, -20001427, -20002195, -20002707, -20003475, -20003987, -20004499, -20005267, -20005779, -20006547, -20007059, -20007571, -20008339, -20008851, -20009619, -20010131, -20010643, -20011411, -20011923, -20012435, -20013203, -20013715, -20014483, -20014995, -20015507, -20016275, -20016787, -20017555, -20018067, -20018579, -20019347, -20019344, -20019342, -20019340, -20019337, -20019335, -20019332, -20019330, -20019328, -20019325, -20019323, -20019320, -20019318, -20019316, -20019313, -20019311, -20019309, -20019306, -20019304, -20019301, -20019299, -20019297, -20019294, -20019292, -20019289, -20019287, -20019285, -20019282, -20019280, -20019277, -20019275, -20019273, -20019270, -20019268, -20019265, -20019263, -20019261, -20019258, -20019256, -20019254, -20019251, -20019249, -20019246, -20019244, -20019242, -20019239, -20019237, -20019234, -20019232, -20019230, -20019227, -20019225, -20019222, -20019220, -20019218, -20019215, -20019213, -20019210, -20019208, -20019206, -20019203, -20215811, -20346883, -20477955, -20674563, -20805635, -21002243, -21133315, -21264387, -21460995, -21592067, -21788675, -21919747, -22050819, -22247427, -22378499, -22575107, -22706179, -22837251, -23033859, -23164931, -23361539, -23492611, -23623683, -23820291, -23951363, -24082435, -24279043, -24410115, -24606723, -24737795, -24868867, -25065475, -25196547, -25393155, -25524227, -25655299, -25851907, -25982979, -26179587, -26310659, -26441731, -26638339, -26769411, -26966019, -27097091, -27228163, -27424771, -27555843, -27686915, -27883523, -28014595, -28211203, -28342275, -28473347, -28669955, -28801027, -28997635, -29128707, -29259779, -29456387, -29455619, -29455107, -29454595, -29453827, -29453315, -29452547, -29452035, -29451523, -29450755, -29450243, -29449475, -29448963, -29448451, -29447683, -29447171, -29446659, -29445891, -29445379, -29444611, -29444099, -29443587, -29442819, -29442307, -29441539, -29441027, -29440515, -29439747, -29439235, -29438467, -29437955, -29437443, -29436675, -29436163, -29435395, -29434883, -29434371, -29433603, -29433091, -29432579, -29431811, -29431299, -29430531, -29430019, -29429507, -29428739, -29428227, -29427459, -29426947, -29426435, -29425667, -29425155, -29424387, -29423875, -29423363, -29422595, -29422083, -29421315, -29420803, -29420291, -29419523, -29419526, -29419528, -29419530, -29419533, -29419535, -29419538, -29419540, -29419542, -29419545, -29419547, -29419550, -29419552, -29419554, -29419557, -29419559, -29419562, -29419564, -29419566, -29419569, -29419571, -29419574, -29419576, -29419578, -29419581, -29419583, -29419585, -29419588, -29419590, -29419593, -29419595, -29419597, -29419600, -29419602, -29419605, -29419607, -29419609, -29419612, -29419614, -29419617, -29419619, -29419621, -29419624, -29419626, -29419629, -29419631, -29419633, -29419636, -29419638, -29419640, -29419643, -29419645, -29419648, -29419650, -29419652, -29419655, -29419657, -29419660, -29419662, -29419664, -29419667, -29223059, -29091987, -28960915, -28764307, -28633235, -28436627, -28305555, -28174483, -27977875, -27846803, -27650195, -27519123, -27388051, -27191443, -27060371, -26929299, -26732691, -26601619, -26405011, -26273939, -26142867, -25946259, -25815187, -25618579, -25487507, -25356435, -25159827, -25028755, -24832147, -24701075, -24570003, -24373395, -24242323, -24045715, -23914643, -23783571, -23586963, -23455891, -23324819, -23128211, -22997139, -22800531, -22669459, -22538387, -22341779, -22210707, -22014099, -21883027, -21751955, -21555347, -21424275, -21227667, -21096595, -20965523, -20768915, -20637843, -20441235, -20310163, -20179091, -29419667]);
    this.galaxyPalette = new Uint32Array([4100849664, 4100653056, 4100521984, 4100390912, 4100194304, 4100063232, 4099866624, 4099735552, 4099604480, 4099407872, 4099276800, 4099080192, 4098949120, 4098818048, 4098621440, 4098490368, 4098293760, 4098162688, 4098031616, 4097835008, 4097703936, 4097507328, 4097376256, 4097245184, 4097048576, 4096917504, 4096786432, 4096589824, 4096458752, 4096262144, 4096131072, 4096000000, 4095803392, 4095672320, 4095475712, 4095344640, 4095213568, 4095016960, 4094885888, 4094689280, 4094558208, 4094427136, 4094230528, 4094099456, 4093902848, 4093771776, 4093640704, 4110286847, 4110155775, 4110024703, 4109828095, 4109697023, 4109500415, 4109369343, 4109238271, 4109041663, 4108910591, 4108713983, 4108582911, 4108451839, 4108255231, 4158586879, 4192141311, 4225695743, 4276027391, 14680063, 65011711, 98566143, 132120575, 182452223, 216006655, 266338303, 299892735, 333447167, 383778815, 417333247, 450887679, 501219327, 534773759, 585105407, 618659839, 652214271, 702545919, 736100351, 786431999, 819986431, 853540863, 903872511, 937426943, 987758591, 1021313023, 1054867455, 1105199103, 1138753535, 1189085183, 1222639615, 1256194047, 1306525695, 1340080127, 1373634559, 1423966207, 1457520639, 1507852287, 1541406719, 1574961151, 1625292799, 1658847231, 1709178879, 1742733311, 1776287743, 1826619391, 1860173823, 1910505471, 1944059903, 1977614335, 2027945983, 2061500415, 2111832063, 2145386495, 2178940927, 2229272575, 2229271807, 2229271295, 2229270783, 2229270015, 2229269503, 2229268735, 2229268223, 2229267711, 2229266943, 2229266431, 2229265663, 2229265151, 2229264639, 2229263871, 2229263359, 2229262591, 2229262079, 2229261567, 2229260799, 2229260287, 2229259519, 2229259007, 2229258495, 2229257727, 2229257215, 2229256703, 2229255935, 2229255423, 2229254655, 2229254143, 2229253631, 2229252863, 2229252351, 2229251583, 2229251071, 2229250559, 2229249791, 2229249279, 2229248511, 2229247999, 2229247487, 2229246719, 2229246207, 2229245439, 2229244927, 2229244415, 2229243647, 2229243135, 2229242623, 2229241855, 2229241343, 2229240575, 2229240063, 2229239551, 2229238783, 2229238271, 2229237503, 2229236991, 2229236479, 2229235711, 2229432319, 2229563391, 2229694463, 2229891071, 2230022143, 2230218751, 2230349823, 2230480895, 2230677503, 2230808575, 2231005183, 2231136255, 2231267327, 2214686975, 2214818047, 2214949119, 2215145727, 2215276799, 2215473407, 2215604479, 2215735551, 2215932159, 2216063231, 2216259839, 2216390911, 2216521983, 2216718591, 2216849663, 2217046271, 2217177343, 2217308415, 2217505023, 2217636095, 2217832703, 2217963775, 2218094847, 2218291455, 2218422527, 2218553599, 2218750207, 2218881279, 2219077887, 2219208959, 2219340031, 2219536639, 2219667711, 2219864319, 2219995391, 2220126463, 2220323071, 2220454143, 2220650751, 2220781823, 2220912895, 2221109503, 2221240575, 2221437183, 2221568255, 2221699327, 2221895935, 2171564287, 2138009855, 2104455423, 2054123775, 2020569343, 1970237695, 1936683263, 1903128831, 1852797183, 1819242751, 1768911103, 1735356671, 1701802239, 1651470591, 1617916159, 1567584511, 1534030079, 1500475647, 1450143999, 1416589567, 1366257919, 1332703487, 1299149055, 1248817407, 1215262975, 1181708543, 1131376895, 1097822463, 1047490815, 1013936383, 980381951, 930050303, 896495871, 846164223, 812609791, 779055359, 728723711, 695169279, 644837631, 611283199, 577728767, 527397119, 493842687, 443511039, 409956607, 376402175, 326070527, 292516095, 258961663, 208630015, 175075583, 124743935, 91189503, 57635071, 7303423, 4268650751, 4218319103, 4184764671, 4151210239, 4100878591, 4100879359, 4100879871, 4100880383, 4100881151, 4100881663, 4100882431, 4100882943, 4100883455, 4100884223, 4100884735, 4100885503, 4100886015, 4100886527, 4100887295, 4100887807, 4100888319, 4100889087, 4100889599, 4100890367, 4100890879, 4100891391, 4100892159, 4100892671, 4100893439, 4100893951, 4100894463, 4100895231, 4100895743, 4100896511, 4100897023, 4100897535, 4100898303, 4100898815, 4100899583, 4100900095, 4100900607, 4100901375, 4100901887, 4100902399, 4100903167, 4100903679, 4100904447, 4100904959, 4100905471, 4100906239, 4100906751, 4100907519, 4100908031, 4100908543, 4100909311, 4100909823, 4100910591, 4100911103, 4100911615, 4100912383, 4100912895, 4100913663, 4100914175, 4100914687, 4100878591]);
    this.greenCloverPalette = new Uint32Array([-100000000, -100000768, -100001280, -100001792, -100002560, -100003072, -100003840, -100004352, -100004864, -100005632, -100006144, -100006912, -100007424, -100007936, -100008704, -100009216, -100009984, -100010496, -100011008, -100011776, -100012288, -100013056, -100013568, -100014080, -100014848, -100015360, -100015872, -100016640, -100017152, -100017920, -100018432, -100018944, -100019712, -100020224, -100020992, -100021504, -100022016, -100022784, -100023296, -100024064, -100024576, -100025088, -100025856, -100026368, -100027136, -100027648, -100028160, -100028928, -100029440, -100029952, -100030720, -100031232, -100032000, -100032512, -100033024, -100033792, -100034304, -100035072, -100035584, -100036096, -100036864, -100036861, -100036859, -100036857, -100036854, -100036852, -100036849, -100036847, -100036845, -100036842, -100036840, -100036837, -100036835, -100036833, -100036830, -100036828, -100036826, -100036823, -100036821, -100036818, -100036816, -100036814, -100036811, -100036809, -100036806, -100036804, -100036802, -100036799, -100036797, -100036794, -100036792, -100036790, -100036787, -100036785, -100036782, -100036780, -100036778, -100036775, -100036773, -100036771, -100036768, -100036766, -100036763, -100036761, -100036759, -100036756, -100036754, -100036751, -100036749, -100036747, -100036744, -100036742, -100036739, -100036737, -100036735, -100036732, -100036730, -100036727, -100036725, -100036723, -100036720, -100233328, -100364400, -100495472, -100692080, -100823152, -101019760, -101150832, -101281904, -101478512, -101609584, -101806192, -101937264, -102068336, -102264944, -102396016, -102592624, -102723696, -102854768, -103051376, -103182448, -103379056, -103510128, -103641200, -103837808, -103968880, -104099952, -104296560, -104427632, -104624240, -104755312, -104886384, -105082992, -105214064, -105410672, -105541744, -105672816, -105869424, -106000496, -106197104, -106328176, -106459248, -106655856, -106786928, -106983536, -107114608, -107245680, -107442288, -107573360, -107704432, -107901040, -108032112, -108228720, -108359792, -108490864, -108687472, -108818544, -109015152, -109146224, -109277296, -109473904, -109473136, -109472624, -109472112, -109471344, -109470832, -109470064, -109469552, -109469040, -109468272, -109467760, -109466992, -109466480, -109465968, -109465200, -109464688, -109464176, -109463408, -109462896, -109462128, -109461616, -109461104, -109460336, -109459824, -109459056, -109458544, -109458032, -109457264, -109456752, -109455984, -109455472, -109454960, -109454192, -109453680, -109452912, -109452400, -109451888, -109451120, -109450608, -109450096, -109449328, -109448816, -109448048, -109447536, -109447024, -109446256, -109445744, -109444976, -109444464, -109443952, -109443184, -109442672, -109441904, -109441392, -109440880, -109440112, -109439600, -109438832, -109438320, -109437808, -109437040, -109437043, -109437045, -109437047, -109437050, -109437052, -109437055, -109437057, -109437059, -109437062, -109437064, -109437067, -109437069, -109437071, -109437074, -109437076, -109437079, -109437081, -109437083, -109437086, -109437088, -109437091, -109437093, -109437095, -109437098, -109437100, -109437102, -109437105, -109437107, -109437110, -109437112, -109437114, -109437117, -109437119, -109437122, -109437124, -109437126, -109437129, -109437131, -109437134, -109437136, -109437138, -109437141, -109437143, -109437146, -109437148, -109437150, -109437153, -109437155, -109437157, -109437160, -109437162, -109437165, -109437167, -109437169, -109437172, -109437174, -109437177, -109437179, -109437181, -109437184, -109240576, -109109504, -108978432, -108781824, -108650752, -108454144, -108323072, -108192000, -107995392, -107864320, -107667712, -107536640, -107405568, -107208960, -107077888, -106946816, -106750208, -106619136, -106422528, -106291456, -106160384, -105963776, -105832704, -105636096, -105505024, -105373952, -105177344, -105046272, -104849664, -104718592, -104587520, -104390912, -104259840, -104063232, -103932160, -103801088, -103604480, -103473408, -103342336, -103145728, -103014656, -102818048, -102686976, -102555904, -102359296, -102228224, -102031616, -101900544, -101769472, -101572864, -101441792, -101245184, -101114112, -100983040, -100786432, -100655360, -100458752, -100327680, -100196608, -109437184]);
}

obj.reverseUint32 = function (uint32) {
    var s32 = new Uint32Array(4);
    var s8 = new Uint8Array(s32.buffer);
    var t32 = new Uint32Array(4);
    var t8 = new Uint8Array(t32.buffer);
    this.reverseUint32 = function (x) {
        s32[0] = x;
        t8[0] = s8[3];
        t8[1] = s8[2];
        t8[2] = s8[1];
        t8[3] = s8[0];
        return t32[0];
    }
    return this.reverseUint32(uint32);
}

obj.rgbToUint32 = function(r, g, b, a = 255) {
    const componentToHex = (c) => {
        const hex = c.toString(16);
        return hex.length == 1 ? "0" + hex : hex;
      };
    
    //return parseInt(componentToHex(r) + componentToHex(g) + componentToHex(b), 16);
    return this.reverseUint32(parseInt(componentToHex(r) + componentToHex(g) + componentToHex(b) + `ff`, 16));
}

obj.generateColor = function (index, colorPalette) {
    switch (colorPalette) {
        case "defaultPalette": return (this.colors[index]);                                  // default
        case "negativePalette": return (this.negativePalette[index]);    // negative
        case "greenPinkPalette": return  (this.greenPinkPalette[index]);                     // green and pink
        case "sakuraPalette": return (this.sakuraPalette[index]);    // sakura
        case "greenPurplePalette": return (this.greenPurplePalette[index]);                     // GREEN AND PURPLE
        case "yellowRedPalette": return (this.yellowRedPalette[index]);                   // yellow and red
        case "bluePurplePalette": return (this.bluePurplePalette[index]);                     // Blue Flower on Purple
        case "galaxyPalette": return (this.galaxyPalette[index]); // galaxy
        case "greenCloverPalette": return (this.greenCloverPalette[index]);
        default: return (this.colors[index]);
    }
}

obj.workerFunc = function (data, cb) {
    var scale = Math.pow(2, data.z - 1);
    var x0 = data.x / scale - 1; 
    var y0 = data.y / scale - 1;
    var d = 1 / (scale << 8); // step size for each pixel in the fractal; is calculated this way to ensure hat the fractal is correctly scaled based on the zoom level.
    var pixels = new Array(65536);
    var MAX_ITER = data.maxIter;
    var c, cx, cy, iter, i = 0, px, py, a1, a2, a3, a4;
    if (data.type != 'barnsley') {
        while (i < 65536) { // iterating over 65536 pixels (256x256) 
            px = i % 256;
            py = (i - px) >> 8;
            cx = x0 + px * d;
            cy = y0 + py * d;
            iter = this[data.type](cx, cy, MAX_ITER, data.cr, data.ci, data.r); // determining the escape time of the complex number
            c = ~~((iter / MAX_ITER) * 360); // normalizing escapeTime to a value between 0 and 1 and multiplied by 360 to determine the hue of the color
            if (data.quantColors) {
                c = ~~((iter / MAX_ITER) * 15); 
                pixels[i++] =  (this.rgbToUint32(data.quantColors[c].r, data.quantColors[c].g, data.quantColors[c].b, 255));
                pixels[i++] =  (this.rgbToUint32(data.quantColors[c].r, data.quantColors[c].g, data.quantColors[c].b, 255));
            } else {
                c = ~~((iter / MAX_ITER) * 360); 
                pixels[i++] = this.generateColor(c, data.colorPalette);
                pixels[i++] = this.generateColor(c, data.colorPalette);
            }
        }
        i = 1;
        while (i < 65536) {
            px = i % 256;
            py = (i - px) >> 8;
            cx = x0 + px * d;
            cy = y0 + py * d;
            if (!px || !py || !px % 255 || py % 255) {
                iter = this[data.type](cx, cy, MAX_ITER, data.cr, data.ci, data.r);
                if (data.quantColors) {
                    c = ~~((iter / MAX_ITER) * 15);
                    pixels[i++] = (this.rgbToUint32(data.quantColors[c].r, data.quantColors[c].g, data.quantColors[c].b, 255));
                } else {
                    c = ~~((iter / MAX_ITER) * 360);
                    pixels[i++] = this.generateColor(c, data.colorPalette);
                }
            }
            else {
                a1 = pixels[i + 1];
                a2 = pixels[i - 1];
                a3 = pixels[i + 256];
                a4 = pixels[i - 256];
                if (a1 === a2 && a2 === a3 && a3 === a4) {
                    i++;
                } else {
                    iter = this[data.type](cx, cy, MAX_ITER, data.cr, data.ci, data.r);
                    if (data.quantColors) {
                        c = ~~((iter / MAX_ITER) * 15);
                        pixels[i++] = (this.rgbToUint32(data.quantColors[c].r, data.quantColors[c].g, data.quantColors[c].b, 255));
                    } else {
                        c = ~~((iter / MAX_ITER) * 360);
                        pixels[i++] = this.generateColor(c, data.colorPalette);
                    }
                }
            }
            i++;
        }
    }
    data.pixels = (new Uint32Array(pixels)).buffer;
    cb(data, [data.pixels]);
};



L.TileLayer.FractalLayer = L.TileLayer.Canvas.extend({
    options: {
        async: true,
        maxZoom: 23,
        continuousWorld: true
    },
    initialize: function (numWorkers, fractalType, maxIter, cr, ci, r, colorPalette, quantColors) {
        this.fractalType = fractalType || "mandlebrot";
        this.numWorkers = numWorkers;
        this._workers = new Array(this.numWorkers);

        this.messages = {};
        this.queue = { total: numWorkers };
        this.cr = cr || -0.74543;
        this.ci = ci || 0.11301;
        this.maxIter = maxIter || 500;
        this.r = r || 4;
        this.colorPalette = colorPalette;
        this.quantColors = quantColors;
    },
    onAdd: function (map) {
        var _this = this;
        var i = 0;
        this.queue.free = [];
        this.queue.len = 0;
        this.queue.tiles = [];
        while (i < this.numWorkers) {
            this.queue.free.push(i);
            this._workers[i] = catiline(obj);
            i++;
        }

        this.on("tileunload", function (e) {
            if (e.tile._tileIndex) {
                var pos = e.tile._tileIndex,
                    tileID = [pos.x, pos.y, pos.z].join(':');
                if (tileID in _this.messages) {
                    delete _this.messages[tileID];
                }
            }
        });

        map.on("zoomstart", function () {
            this.queue.len = 0;
            this.queue.tiles = [];
        }, this);
        return L.TileLayer.Canvas.prototype.onAdd.call(this, map);
    },
    onRemove: function (map) {
        this.messages = {};
        var len = this._workers.length;
        var i = 0;
        while (i < len) {
            this._workers[i]._close();
            i++;
        }
        return L.TileLayer.Canvas.prototype.onRemove.call(this, map);
    },
    drawTile: function (canvas, tilePoint) {
        if (!this.queue.free.length) {
            this.queue.tiles.push([canvas, tilePoint]);
            this.queue.len++;
        } else {
            this._renderTile(canvas, tilePoint, this.queue.free.pop());
        }
    },
    _renderTile: function (canvas, tilePoint, workerID) {
        var z = this._map.getZoom();
        canvas._tileIndex = { x: tilePoint.x, y: tilePoint.y, z: z };
        var tileID = tilePoint.x + ":" + tilePoint.y + ":" + z;
        this.messages[tileID] = canvas;
        var msg = {
            x: tilePoint.x,
            y: tilePoint.y,
            z: z,
            tileID: tileID,
            workerID: workerID,
            cr: this.cr,
            ci: this.ci,
            maxIter: this.maxIter,
            type: this.fractalType,
            start: Date.now(),
            r: this.r,
            colorPalette: this.colorPalette,
            quantColors: this.quantColors
        };
        var _this = this;
        this._workers[workerID].workerFunc(msg).then(function (data) {
            console.log(Date.now() - data.start + ":" + data.tileID)
            var canvas, next;
            if (_this.queue.len) {
                _this.queue.len--;
                next = _this.queue.tiles.shift();
                _this._renderTile(next[0], next[1], data.workerID);
            } else {
                _this.queue.free.push(data.workerID);
            }
            if (data.tileID in _this.messages) {
                canvas = _this.messages[data.tileID];
            } else {
                return;
            }

            var ctx = canvas.getContext('2d');
            var array = new Uint8Array(data.pixels);
            var imagedata = ctx.getImageData(0, 0, 256, 256);
            imagedata.data.set(array);

            ctx.putImageData(imagedata, 0, 0);
            _this.tileDrawn(canvas);
        }, function (a) { console.log(a) });
    }
});
L.tileLayer.fractalLayer = function (numWorkers, t, mi, cr, ci, r, colorPalette, quantColors) {
    return new L.TileLayer.FractalLayer(numWorkers, t, mi, cr, ci, r, colorPalette, quantColors);
}
